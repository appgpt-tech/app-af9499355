//Source code generated by AppGPT (www.appgpt.tech)
import { mergeTranslations } from 'ra-core';
import polyglotI18nProvider from 'ra-i18n-polyglot';
import enOriginal from 'ra-language-english';
import frOriginal from 'ra-language-french';

const enResources = {
  resources: {
    Cars: {
      name: 'Cars',
      fields: {
        model: 'Model',
        speed: 'Speed',
        health: 'Health',
        weaponType: 'Weapon Type',
        id: 'id',
      },
    },
    Weapons: {
      name: 'Weapons',
      fields: {
        name: 'Name',
        damage: 'Damage',
        range: 'Range',
        ammoCount: 'Ammo Count',
        id: 'id',
      },
    },
    Animals: {
      name: 'Animals',
      fields: {
        type: 'Type',
        health: 'Health',
        speed: 'Speed',
        damage: 'Damage',
        id: 'id',
      },
    },
    Stages: {
      name: 'Stages',
      fields: {
        stageNumber: 'Stage Number',
        difficultyLevel: 'Difficulty Level',
        environment: 'Environment',
        objectives: 'Objectives',
        id: 'id',
      },
    },
  },
};
const frResources = {
  resources: {
    Cars: {
      name: 'Cars (fr)',
      fields: {
        model: 'Model (fr)',
        speed: 'Speed (fr)',
        health: 'Health (fr)',
        weaponType: 'Weapon Type (fr)',
        id: 'id',
      },
    },
    Weapons: {
      name: 'Weapons (fr)',
      fields: {
        name: 'Name (fr)',
        damage: 'Damage (fr)',
        range: 'Range (fr)',
        ammoCount: 'Ammo Count (fr)',
        id: 'id',
      },
    },
    Animals: {
      name: 'Animals (fr)',
      fields: {
        type: 'Type (fr)',
        health: 'Health (fr)',
        speed: 'Speed (fr)',
        damage: 'Damage (fr)',
        id: 'id',
      },
    },
    Stages: {
      name: 'Stages (fr)',
      fields: {
        stageNumber: 'Stage Number (fr)',
        difficultyLevel: 'Difficulty Level (fr)',
        environment: 'Environment (fr)',
        objectives: 'Objectives (fr)',
        id: 'id',
      },
    },
  },
};

const en = mergeTranslations(enOriginal, enResources);
const fr = mergeTranslations(frOriginal, frResources);

const translations = { en, fr };
export const i18nProvider = polyglotI18nProvider(
  (locale) => translations[locale],
  'en', //default locale
  [
    { locale: 'en', name: 'English' },
    { locale: 'fr', name: 'Fran√ßais' },
  ],
);
