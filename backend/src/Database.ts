//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { CarsEntity } from './db/Cars.entity';
import { WeaponsEntity } from './db/Weapons.entity';
import { AnimalsEntity } from './db/Animals.entity';
import { StagesEntity } from './db/Stages.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      CarsEntity,
      WeaponsEntity,
      AnimalsEntity,
      StagesEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Cars: [
        { model: 'model 1', speed: 1, health: 1, weaponType: 1, id: 51 },
        { model: 'model 2', speed: 2, health: 2, weaponType: 2, id: 45 },
        { model: 'model 3', speed: 3, health: 3, weaponType: 3, id: 59 },
        { model: 'model 4', speed: 4, health: 4, weaponType: 4, id: 88 },
        { model: 'model 5', speed: 5, health: 5, weaponType: 5, id: 18 },
      ],
      Weapons: [
        { name: 'name 1', damage: 1, range: 1, ammoCount: 1, id: 49 },
        { name: 'name 2', damage: 2, range: 2, ammoCount: 2, id: 95 },
        { name: 'name 3', damage: 3, range: 3, ammoCount: 3, id: 69 },
        { name: 'name 4', damage: 4, range: 4, ammoCount: 4, id: 72 },
        { name: 'name 5', damage: 5, range: 5, ammoCount: 5, id: 13 },
      ],
      Animals: [
        { type: 'type 1', health: 1, speed: 1, damage: 1, id: 92 },
        { type: 'type 2', health: 2, speed: 2, damage: 2, id: 60 },
        { type: 'type 3', health: 3, speed: 3, damage: 3, id: 81 },
        { type: 'type 4', health: 4, speed: 4, damage: 4, id: 25 },
        { type: 'type 5', health: 5, speed: 5, damage: 5, id: 12 },
      ],
      Stages: [
        {
          stageNumber: 1,
          difficultyLevel: 'difficultyLevel 1',
          environment: 'environment 1',
          objectives: 'objectives 1',
          id: 61,
        },
        {
          stageNumber: 2,
          difficultyLevel: 'difficultyLevel 2',
          environment: 'environment 2',
          objectives: 'objectives 2',
          id: 92,
        },
        {
          stageNumber: 3,
          difficultyLevel: 'difficultyLevel 3',
          environment: 'environment 3',
          objectives: 'objectives 3',
          id: 96,
        },
        {
          stageNumber: 4,
          difficultyLevel: 'difficultyLevel 4',
          environment: 'environment 4',
          objectives: 'objectives 4',
          id: 100,
        },
        {
          stageNumber: 5,
          difficultyLevel: 'difficultyLevel 5',
          environment: 'environment 5',
          objectives: 'objectives 5',
          id: 32,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('CarsEntity', data.Cars);
      await this.SeedResource('WeaponsEntity', data.Weapons);
      await this.SeedResource('AnimalsEntity', data.Animals);
      await this.SeedResource('StagesEntity', data.Stages);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
